package KCN-judu/luna-poly

// Values
fn coe[A : Eq + Semiring + HomomorphismNat](Int) -> Polynomial[A]

fn to_poly[A : Eq + Semiring](Array[A]) -> Polynomial[A]

fn var[A : Eq + Semiring]() -> Polynomial[A]

// Types and methods
type ExpVec
impl ExpVec {
  is_empty(Self) -> Bool
  length(Self) -> Int
  op_equal(Self, Self) -> Bool
  op_get(Self, Int) -> Int
  op_set(Self, Int, Int) -> Unit
}

type Polynomial
impl Polynomial {
  empty[A : Default](cap~ : Int) -> Self[A]
}
impl[V : Compare] Compare for Polynomial[V]
impl[V : Eq] Eq for Polynomial[V]

type SparsePolynomial
impl SparsePolynomial {
  add_term[A : Semiring + Eq](Self[A], (ExpVec, A)) -> Self[A]
  add_term_inplace[A : Semiring + Eq](Self[A], (ExpVec, A)) -> Unit
  mul_term[A : Semiring + Eq](Self[A], ExpVec, A) -> Self[A]
  mul_term_inplace[A : Semiring + Eq](Self[A], ExpVec, A) -> Unit
  new[A : Semiring + Eq]() -> Self[A]
  op_add[A : Semiring + Eq](Self[A], Self[A]) -> Self[A]
  op_get[A : Semiring + Eq](Self[A], ExpVec) -> A?
  op_mul[A : Semiring + Eq](Self[A], Self[A]) -> Self[A]
  size[A : Semiring + Eq](Self[A]) -> Int
}
impl[V : Eq] Eq for SparsePolynomial[V]

// Type aliases

// Traits
trait HomomorphismNat

trait Monoid

trait Semiring

