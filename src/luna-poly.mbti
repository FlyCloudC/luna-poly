package KCN-judu/luna-poly

// Values
fn coe[A : Eq + Semiring + HomomorphismNat](Int) -> Polynomial[A]

fn to_poly[A : Eq + Semiring](Array[A]) -> Polynomial[A]

fn var[A : Eq + Semiring]() -> Polynomial[A]

// Types and methods
type ExpVec
impl ExpVec {
  is_empty(Self) -> Bool
  length(Self) -> Int
  new(exp_vec~ : Array[Int] = .., arity~ : Int = ..) -> Self
  op_equal(Self, Self) -> Bool
  op_get(Self, Int) -> Int
  op_set(Self, Int, Int) -> Unit
  shrink(Self) -> Unit
}

type Polynomial
impl Polynomial {
  empty[A : Default](cap~ : Int) -> Self[A]
}
impl[V : Compare] Compare for Polynomial[V]
impl[V : Eq] Eq for Polynomial[V]

type SparsePolynomial
impl SparsePolynomial {
  add_term[V : Semiring](Self[V], ExpVec, V) -> Unit
  mul_term[V : Semiring](Self[V], ExpVec, V) -> Unit
  new[V : Semiring]() -> Self[V]
}

// Type aliases

// Traits
trait HomomorphismNat

trait Semiring

