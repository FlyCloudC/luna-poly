package KCN-judu/luna-poly

// Values
fn coe[A : Eq + Semiring + HomomorphismNat](Int) -> Polynomial[A]

fn is_zero[A : Semiring + Eq](A) -> Bool

fn monomial[A : Eq + Semiring](Int, A) -> Polynomial[A]

fn to_poly[A : Eq + Semiring](Array[A]) -> Polynomial[A]

fn var[A : Eq + Semiring]() -> Polynomial[A]

// Types and methods
type ExpVec
impl ExpVec {
  length(Self) -> Int
  op_equal(Self, Self) -> Bool
  op_get(Self, Int) -> Int
  op_set(Self, Int, Int) -> Unit
}

type Polynomial[V]
impl Polynomial {
  derivative[A : HomomorphismNat + Eq + Semiring](Self[A]) -> Self[A]
  empty[A : Semiring](cap~ : Int) -> Self[A]
  eval[A : Semiring](Self[A], A) -> A
  fold[A, B](Self[A], (B, A) -> B, init~ : B) -> B
  karatsuba[A : Eq + Semiring + Ring](Self[A], Self[A]) -> Self[A]
  leading[A](Self[A]) -> (Int, A)?
  length[A](Self[A]) -> Int
  op_sub[A : Eq + Ring](Self[A], Self[A]) -> Self[A]
  scale[A : Eq + Semiring](Self[A], Int, A) -> Self[A]
  substitute[A, B : Semiring](Self[A], (B, A) -> B, init~ : B) -> B
  substitute_poly[A : Eq + Semiring](Self[A], Self[A]) -> Self[A]
}
impl[V : Compare] Compare for Polynomial[V]
impl[V : Eq] Eq for Polynomial[V]

type SkipList[A]
impl SkipList {
  contains[A : Compare](Self[A], A) -> Bool
  find[A : Compare](Self[A], A) -> Self[A]?
}

type Term[A]
impl Term {
  cancelation[A : Semiring + Eq](Self[A], Self[A]) -> Self[A]
  degree[A : Semiring](Self[A]) -> Int
  is_one[A : Semiring + Eq](Self[A]) -> Bool
  is_zero[A : Semiring + Eq](Self[A]) -> Bool
  one[A : Semiring + Eq]() -> Self[A]
  op_equal[A : Semiring + Eq](Self[A], Self[A]) -> Bool
  op_mul[A : Semiring + Eq](Self[A], Self[A]) -> Self[A]
  pair[A : Semiring](ExpVec, A) -> Self[A]
  zero[A : Semiring + Eq]() -> Self[A]
}

// Type aliases

// Traits
trait AbelianGroup

trait HomomorphismNat

trait Monoid

trait Ring

trait Semiring

