package KCN-judu/luna-poly/sparse

alias @KCN-judu/luna-complex/complex as @complex
alias @moonbitlang/core/hashmap as @hashmap

// Values

// Types and methods
pub(all) enum ExpTerm {
  ExpTerm(Array[Int])
}
impl ExpTerm {
  length(Self) -> Int
  new(exp_vec~ : Array[Int] = .., arity~ : Int = ..) -> Self
  op_equal(Self, Self) -> Bool
  op_get(Self, Int) -> Int
  shrink(Self) -> Unit
  split_at(Self, Int) -> (Self, Self)
}

type Real
impl Real {
  op_add(Self, Self) -> Self
  op_equal(Self, Self) -> Bool
  op_mul(Self, Self) -> Self
}

pub(all) enum SparsePolynomial {
  RealCoefficientPoly(@hashmap.T[ExpTerm, Real])
  ComplexCoefficientPoly(@hashmap.T[ExpTerm, @complex.Complex])
  BoolCoefficientPoly(@hashmap.T[ExpTerm, Bool])
}

// Type aliases

// Traits
pub trait Coefficient {
  op_add(Self, Self) -> Self
  op_mul(Self, Self) -> Self
  to_complex(Self) -> @complex.Complex
  to_real(Self) -> Real
  to_bool(Self) -> Bool
}

pub trait Sparse {
  add_real_coe_term(Self, ExpTerm, Real) -> Unit
  add_complex_coe_term(Self, ExpTerm, @complex.Complex) -> Unit
  add_bool_coe_term(Self, ExpTerm, Bool) -> Unit
}

